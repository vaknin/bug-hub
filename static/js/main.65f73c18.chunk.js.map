{"version":3,"sources":["components/firebase.js","components/Item.js","components/EditItemDialog.js","components/ChangeTabDialog.js","components/Items.js","components/NewItemDialog.js","components/Nav.js","App.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Item","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","createCardHeader","color","props","item","type","react_default","a","createElement","className","title","class","date","createCardBody","priority","tab","key","substring","fields","supplier","toUpperCase","description","client","push","closedate","reason","createLinks","href","tfs","rel","target","ticket","inherits","createClass","value","_this2","onClick","getItem","data-toggle","data-target","Component","EditItemDialog","createInputs","createInput","name","display","placeholder","required","htmlFor","maxLength","undefined","defaultValue","onInput","e","updateTemp","id","temp","onChange","submitForm","editItem","createSetAsBtn","setItemAs","newTab","textContent","toLowerCase","openTabDialog","createButtons","role","aria-haspopup","aria-expanded","aria-labelledby","modal","document","querySelector","form","$","on","reset","tabIndex","aria-hidden","onSubmit","autoComplete","data-dismiss","removeItem","changeTabDialog","state","setState","capitalTabName","tabName","slice","confirm","preventDefault","changeItemTab","status","Items","data","_i","_Object$keys","keys","items","map","components_Item","activeItem","assign","_this3","listItems","components_EditItemDialog","ChangeTabDialog","NewItemDialog","defineProperty","clearState","newItem","typeDropdown","Nav","switch","changeTab","createTab","capitalized","components_NewItemDialog","spellCheck","search","firebase","database","ref","App","searching","results","searchItem","keyword","toString","_iteratorNormalCompletion","_didIteratorError","_iteratorError","itemsloop","_step","_iterator","Symbol","iterator","next","done","_Object$values","values","includes","err","return","getDate","today","Date","dd","String","padStart","mm","getMonth","yyyy","getFullYear","_i2","_keys","set","child","remove","update","snapshot","itemsObj","val","_i3","_keys2","components_Nav","components_Items","React","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.65f73c18.chunk.js","sourcesContent":["const config = {\n    apiKey: \"AIzaSyC8DcDLA9ksP2GsAUEfnu0gZm48R5mps9s\",\n    authDomain: \"bugsmanager-8f66d.firebaseapp.com\",\n    databaseURL: \"https://bugsmanager-8f66d.firebaseio.com\",\n    projectId: \"bugsmanager-8f66d\",\n    storageBucket: \"\",\n    messagingSenderId: \"345845082304\",\n    appId: \"1:345845082304:web:3280019aa7596de0\"\n  };\n\n  export default config;","import React, { Component } from 'react';\n\nexport class Item extends Component {\n\n    // Create the card's header, dynmically\n    createCardHeader = () => {\n\n        // Get the item's type, and dynamically set the its color\n        let type = this.props.item.type;\n        let color;        \n\n        // Dynmically fetch the appropriate type color\n        switch(type){\n\n            // Supplier - Gray\n            case 'Supplier':\n                    color = 'secondary';\n                break;\n\n            // Affiliate - Blue\n            case 'Affiliate':\n                color = 'primary';\n                break;\n\n            // Room Mapping - Black\n            case 'Room Mapping':\n                color = 'dark';\n                break;\n            \n            // no default\n        }\n\n        return (\n            <div className=\"d-flex card-title\">\n                <h3 className=\"mr-auto\">{this.props.item.title}</h3>\n                <div className=\"d-flex flex-column ml-auto text-center\">\n                    <h5><span class={`badge badge-${color}`}>{this.props.item.type}</span></h5>\n                    <h5>{this.props.item.date}</h5>\n                </div>\n            </div>\n        );\n    }\n\n    // Dynamically display the Item's properties\n    createCardBody = () => {\n\n        let item = this.props.item; // The Item to display\n        let tab = item.tab; // Get the Item's tab location\n        let key = item.key.substring(0,4);\n\n        let priority;\n\n        // Active \n        if (tab === 'active'){\n\n            // Determine badge color based on priority\n            let color;\n            switch (item.priority) {\n\n                // Unknown - teal\n                case 'Unknown':\n                    color = 'info';\n                    break;\n\n                // Low - green\n                case 'Low':\n                    color = 'success';\n                    break;\n                \n                // Medium - Yellow\n                case 'Medium':\n                    color = 'warning';\n                    break;\n\n                // High - Red\n                case 'High':\n                    color = 'danger';\n                    break;\n                // no default\n            }\n\n            priority = <h5><span key={'priority' + key} class={`badge badge-${color} card-text`}>{item.priority}</span></h5>    \n        }\n\n        let fields = [\n            <div className=\"row\">\n                <h5><span key={'supplier' + key} class=\"badge badge-warning card-text mr-2\">{item.supplier.toUpperCase()}</span></h5>\n                {tab === 'active' ? priority : null}\n            </div>,\n            <p key={'desc' + key} className=\"card-text mt-3\">{item.description}</p>,\n            item.client ? <p key={'client' + key} className=\"card-text\"><strong>Affected Clients: </strong>{item.client}</p> : null\n        ];\n        \n\n        // Check which tab the item belongs to (different tabs display different fields)\n        switch(tab){\n            \n            // Completed\n            case 'completed':\n                    fields.push(\n                        <p key={'closedate' + key} className=\"card-text\">Completed at {item.closedate}</p>\n                    );\n                break;\n            \n            // Rejected\n            case 'rejected':\n                    fields.push(\n                        <p key={'closedate' + key} className=\"card-text\"><strong>Rejected at {item.closedate}</strong>: {item.reason}</p>\n                    );\n                break;\n            \n            // no default\n        }\n        \n        return fields;\n    }\n\n    // Create the TFS & Ticket links\n    createLinks = () => {\n        return (\n            <div className=\"justify-content-center d-flex\">\n                <a href={`https://gimmonix.visualstudio.com/Versions%20list%20-%20Waterfall/_workitems/edit/${this.props.item.tfs}`} className=\"card-link badge badge-primary p-2\" rel=\"noopener noreferrer\" target=\"_blank\">TFS Link</a>\n                {this.props.item.ticket ? <a href={`https://carsolize.zendesk.com/agent/tickets/${this.props.item.ticket}`} className=\"card-link badge badge-primary p-2\" rel=\"noopener noreferrer\" target=\"_blank\">Ticket Link</a> : null}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"card col-4 mb-4 mx-2\" onClick={() => this.props.getItem(this.props.item)} data-toggle=\"modal\" data-target=\"#editItemDialog\">\n                <div className=\"card-body\">\n                    {this.createCardHeader()}\n                    {this.createCardBody()}\n                    {this.createLinks()}\n                </div>\n            </div>\n         )\n    }\n}\n\nexport default Item;","import React, { Component } from 'react';\nimport $ from '../../node_modules/jquery/dist/jquery';\n\nexport class EditItemDialog extends Component {    \n\n    // Once the component has loaded, configure modal to reset form on dismiss (this is called only once in the entire lifycycle)\n    componentDidMount() {\n        \n        let modal = document.querySelector('#editItemDialog');\n        let form = document.querySelector('#editItemForm');\n        $(modal).on('hide.bs.modal', () => {\n            form.reset();\n        });\n    }\n\n    // Dynamically create inputs\n    createInputs = () => {\n\n        // Check if there is no item to return\n        if (!this.props.item){\n            return null;\n        }\n\n        const createInput = (type, name, display, placeholder, value, required) => {\n            return(\n                <div className=\"form-group\">\n                    <label htmlFor={name} className=\"col-form-label\">{display}</label>\n                    <input type={type} maxLength={name === 'supplier' ? 3 : undefined} defaultValue={value} onInput={e => this.props.updateTemp(name, e.target.value)} className=\"form-control\" id={name}  placeholder={placeholder} required={required}/>\n                </div>\n            );\n        }\n\n        const typeDropdown = () => {\n\n            return(\n                <div>\n                    <label htmlFor=\"selectType\" className=\"col-form-label\">Type</label>\n                    <select value={this.props.temp.type} onChange={e => this.props.updateTemp('type', e.target.value)} className=\"form-control mb-2\" id=\"selectType\">\n                        <option>Supplier</option>\n                        <option>Affiliate</option>\n                        <option>Room Mapping</option>\n                    </select>\n                </div>);\n        }\n\n        const priorityDropdown = () => {\n\n            return(\n                <div>\n                    <label htmlFor=\"select_priority2\" className=\"col-form-label\">Priority</label>\n                    <select value={this.props.temp.priority} onChange={e => this.props.updateTemp('priority', e.target.value)} className=\"form-control\" id=\"select_priority2\" required>\n                        <option>Unknown</option>\n                        <option>Low</option>\n                        <option>Medium</option>\n                        <option>High</option>\n                    </select>\n                </div>\n            );\n        }\n\n        return(\n            <div>\n                {typeDropdown()}\n                {this.props.item.tab === 'active' ? priorityDropdown() : null}\n                {this.props.item.tab === 'rejected' ? createInput('text', 'reason', '* Rejection Reason', 'The main reason the bug was rejected for', this.props.item.reason, true): null}\n                {createInput('text', 'supplier', '* Supplier', 'The supplier the bug deals with, e.g. TRC, EXP', this.props.item.supplier, true)}\n                {createInput('text', 'title', '* Title', 'A descriptive title for the bug', this.props.item.title, true)}\n                {createInput('text', 'description', 'Description', 'A short description of the bug', this.props.item.description, null)}\n                {createInput('text', 'client', 'Impcated Client', 'Who is suffering from this bug?', this.props.item.client, null)}\n                {createInput('number', 'tfs', '* TFS #', 'The TFS number, e.g. 23580', this.props.item.tfs, true)}\n                {createInput('number', 'ticket', 'Ticket #', 'The Ticket\\'s number, if exists, e.g. 23580', this.props.item.ticket, null)}\n            </div>\n        );\n\n    }\n\n    // Submits the form and sends its data to App.js\n    submitForm = e => {\n        this.props.editItem(e);\n    }\n\n    // Creates the dropdown button that changes an Item's tab\n    createSetAsBtn = () => {\n\n        // Check if there is no item to return\n        if (!this.props.item){\n            return null;\n        }\n\n        // 'Set as' Button onClick\n        const setItemAs = e => {\n            let newTab = e.target.textContent.toLowerCase();\n            this.props.updateTemp('tab', newTab);\n            this.props.openTabDialog(newTab);\n        }\n\n        // Dynamically create the dropdown buttons\n        const createButtons = tab => {\n            let currentTab = this.props.item.tab;\n\n            // Don't display 'Set as Pending' if the item is already set to Pending\n            if (currentTab === tab.toLowerCase()){\n                return null;\n            }\n            \n            return <button onClick={setItemAs} type=\"button\" className=\"dropdown-item btn\">{tab}</button>\n        }\n\n        // Render\n        return(\n        <div className=\"btn-group\" role=\"group\">\n            <button id=\"btnGroupDrop1\" type=\"button\" className=\"btn btn-warning dropdown-toggle mr-1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Set as</button>\n            <div className=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop1\">\n                {createButtons('Pending')}\n                {createButtons('Active')}\n                {createButtons('Completed')}\n                {createButtons('Rejected')}\n            </div>\n        </div>);\n    }\n\n    // Render\n    render() {            \n\n        return (\n            <div className=\"modal fade\" id=\"editItemDialog\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"editItemDialogLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content px-2\">\n                        <form id=\"editItemForm\" onSubmit={this.submitForm} autoComplete=\"off\">\n\n                            {/* Header */}\n                            <div className=\"modal-header\">\n                                <h5 className=\"modal-title\" id=\"editItemDialogLabel\">Edit Item</h5>\n\n                                {/* Buttons */}\n                                <div>\n                                    {this.createSetAsBtn()}\n                                    <button type=\"submit\" className=\"btn btn-success mx-1\">Save</button>\n                                    <button type=\"button\" className=\"btn btn-secondary mx-1\" data-dismiss=\"modal\">Cancel</button>\n                                    <button type=\"button\" className=\"btn btn-danger mx-1\" onClick={() => this.props.removeItem(this.props.item.key)} data-dismiss=\"modal\">Delete</button>\n                                </div>\n                            </div>\n\n                            {/* Body */}\n                            <div className=\"modal-body\">\n                                {this.createInputs()}\n                            </div>                                \n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default EditItemDialog;","import React, { Component } from 'react';\nimport $ from '../../node_modules/jquery/dist/jquery';\n\nexport class changeTabDialog extends Component {\n\n    //#region Initialization\n\n    state = {\n        priority: 'Unknown'\n    };\n\n    // Once the component has loaded, configure modal to reset form on dismiss (this is called only once in the entire lifycycle)\n    componentDidMount() {\n        \n        let modal = document.querySelector('#changeTabDialog');\n        let form = document.querySelector('#changeTabForm');\n        $(modal).on('hide.bs.modal', () => {\n            form.reset();\n        });\n    }\n\n    //#endregion\n\n    // Dynamically create inputs, depending on the target tab\n    createInputs = () => {\n\n        // If no tab is given, don't create anything\n        if (!this.props.tab){\n            return null;\n        }\n\n        let tab = this.props.tab; // The target tab\n\n        // Moving the Item to 'Active' tab, ask user to set priority\n        if (tab === 'active') { \n            return(\n                <div>\n                    <label htmlFor=\"select_priority\" className=\"col-form-label\">Priority</label>\n                    <select defaultValue=\"Unknown\" onChange={e => this.setState({priority: e.target.value})} className=\"form-control\" id=\"select_priority\" required>\n                        <option>Unknown</option>\n                        <option>Low</option>\n                        <option>Medium</option>\n                        <option>High</option>\n                    </select>\n                </div>\n            );\n        }\n\n        // Moving the Item to 'Rejected' tab, ask user to rejection reason\n        else if (tab === 'rejected') {\n            return(\n                <div className=\"form-group\">\n                    <label htmlFor=\"input_reason\" className=\"col-form-label\">Reason</label>\n                    <input type=\"text\" onInput={e => this.setState({reason: e.target.value})} className=\"form-control\" id=\"input_reason\"  placeholder=\"Why the bug has been rejected?\" required/>\n                </div>\n            );\n        }\n    }\n\n    // Display the tab's name with an uppercase first letter\n    capitalTabName = () => {\n\n        // If no tab is given, don't display anything\n        if (!this.props.tab){\n            return null;\n        }\n        let tabName = this.props.tab;\n        return tabName[0].toUpperCase() + tabName.slice(1);\n    }\n\n    // Move the data along, Form --> Items.js --> App.js --> Database\n    confirm = e => {\n\n        const clearState = () => {\n            this.setState({\n                status: undefined,\n                priority: 'Unknown',\n                reason: undefined,\n            });\n        }\n\n        e.preventDefault();\n        e.target.reset(); // Reset the form\n        this.props.changeItemTab(this.state); // Send the Item to App.js\n        clearState(); // Clear the state\n    }\n\n    render() {\n\n        return (\n            <div className=\"modal fade\" id=\"changeTabDialog\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"changeTabDialogLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content px-2\">\n                        <form id=\"changeTabForm\" onSubmit={this.confirm} autoComplete=\"off\">\n\n                            {/* Header */}\n                            <div className=\"modal-header\">\n                                <h5 className=\"modal-title\" id=\"changeTabDialogLabel\">Set as {this.capitalTabName()}</h5>\n\n                                {/* Buttons */}\n                                <div>\n                                    <button type=\"submit\" className=\"btn btn-success mx-1\">Confirm</button>\n                                    <button type=\"button\" className=\"btn btn-secondary mx-1\" data-dismiss=\"modal\">Cancel</button>\n                                </div>\n                            </div>\n\n                            {/* Body */}\n                            <div className=\"modal-body\">\n                                {this.createInputs()}\n                            </div>                                \n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default changeTabDialog;","import React, { Component } from 'react';\nimport Item from './Item';\nimport EditItemDialog from './EditItemDialog';\nimport ChangeTabDialog from './ChangeTabDialog';\nimport $ from '../../node_modules/jquery/dist/jquery';\n\nexport class Items extends Component {\n\n    state = {};\n\n    listItems(){\n\n        return this.props.items.map(item => \n            {\n                return(\n                item.tab === this.props.tab // Is the item in the curretly viewed tab?\n                ? \n                <Item getItem={item => this.setState({activeItem: Object.assign({}, item), temp: Object.assign({}, item)})} key={item.key} item={item}/> // Yes -> Display the item\n                : \n                null) // No -> Don't display the item\n            });\n    }\n\n    updateTemp = (key, value) => {\n        let temp = this.state.temp;\n        temp[key] = value;\n        this.setState(temp);\n    }\n\n    // Close the edit modal and open the changeTab dialog\n    openTabDialog = tab => {\n\n        $('#editItemDialog').modal('hide'); // Close dialog\n\n        // If the target tab is pending/completed, skip tab dialog\n        if (tab === 'pending' || tab === 'completed') {\n            return this.changeItemTab();\n        }\n\n        this.setState({newTab: tab}); // Save the new item's tab\n        $('#changeTabDialog').modal('show'); // Open ChangeTabDialog\n    }\n\n    // Save the changed item to database\n    changeItemTab = data => {\n\n        let item = this.state.temp; // The configured item\n\n        // Data can be empty, e.g. moving to pending doesn't require to send any data\n        if(data !== null && data !== undefined){\n            for (let key of Object.keys(data)){\n                if (data[key] !== undefined){\n                    item[key] = data[key];\n                }\n            }\n        }\n\n        this.props.changeItemTab(item); // Send to App.js and then to Database\n    }\n\n\n    render() {\n\n        return (\n            <div className=\"row d-flex justify-content-center\">\n                {/* List all Items */}\n                {this.listItems()}\n\n                {/* This dialog opens when editing/deleting an Item */}\n                <EditItemDialog \n                updateTemp={this.updateTemp} \n                temp={this.state.temp} \n                item={this.state.activeItem} \n                editItem={e => this.props.editItem(e, this.state.temp)} \n                removeItem={this.props.removeItem} \n                openTabDialog={this.openTabDialog}/>\n\n                {/* Change an Item's Tab, let the user fill the required fields */}\n                <ChangeTabDialog \n                tab={this.state.newTab}\n                changeItemTab={this.changeItemTab}/>\n            </div>\n        )\n    }\n}\n\nexport default Items;","import React, {\n    Component\n} from 'react';\n\nexport class NewItemDialog extends Component {\n    \n    // Store form data here\n    state = {\n        type: 'Supplier'\n    };\n    \n    createInput = (type, name, display, placeholder, required) => {\n        \n        return (\n            <div className=\"form-group\">\n              <label htmlFor={name} className=\"col-form-label\">{display}</label>\n              <input type={type} maxLength={name === 'supplier' ? 3 : undefined} className=\"form-control\" id={name} onInput={e => this.setState({ [name]: e.target.value })} placeholder={placeholder} required={required}/>\n          </div>\n        );\n    }\n    \n    typeDropdown() {\n        return (\n            <div>\n                <label htmlFor=\"selectType\" className=\"col-form-label\">Type</label>\n                <select className=\"form-control mb-3\" onInput={e => this.setState({ type: e.target.value })} id=\"selectType\">\n                    <option>Supplier</option>\n                    <option>Affiliate</option>\n                    <option>Room Mapping</option>\n                </select>\n            </div>);\n    }\n    \n    clearState = () => {\n        this.setState({\n            title: undefined,\n            type: 'Supplier',\n            description: undefined,\n            supplier: undefined,\n            client: undefined,\n            tfs: undefined,\n            ticket: undefined,\n        });\n    }\n\n    submitForm = e => {\n        this.props.newItem(e, this.state); // Create the item\n        this.clearState(); // Clear the state after form submit\n    }\n    \n    render() {\n        \n        return (\n            <div className=\"modal fade\" id=\"newItemDialog\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"newItemDialogLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content px-2\">\n\n\n                    <form id=\"newItemForm\" onSubmit={this.submitForm} autoComplete=\"off\">\n\n                        {/* Header */}\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"editItemDialogLabel\">New Item</h5>\n\n                            {/* Buttons */}\n                            <div>\n                                <button type=\"submit\" className=\"btn btn-primary mx-1\">Add Item</button>\n                                <button type=\"button\" className=\"btn btn-secondary mx-1\" data-dismiss=\"modal\">Cancel</button>\n                            </div>\n                        </div>\n\n\n                        {/* Body */}\n                        <div className=\"modal-body\">\n                            {this.typeDropdown()}\n                            {this.createInput('text', 'supplier', '* Supplier', 'The supplier the bug deals with, e.g. TRC, EXP', true)}\n                            {this.createInput('text', 'title', '* Title', 'A descriptive title for the bug', true)}\n                            {this.createInput('text', 'description', 'Description', 'A short description of the bug', null)}\n                            {this.createInput('text', 'client', 'Impcated Client', 'Who is suffering from this bug?', null)}\n                            {this.createInput('number', 'tfs', '* TFS #', 'The TFS number, e.g. 23580', true)}\n                            {this.createInput('number', 'ticket', 'Ticket #', 'The Ticket\\'s number, if exists, e.g. 23580', null)}                                                                        \n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default NewItemDialog;\n","import React, { Component } from 'react'\nimport NewItemDialog from './NewItemDialog';\n\nexport class Nav extends Component {\n\n   state = {\n      tab: 'pending'\n   };\n\n   //Move between tabs, e.g. Pending to Rejected\n   switch = tab => {\n\n      if (tab !== this.state.tab){\n\n         //Update state with the new tab\n         this.setState({tab});\n\n         //Change tab in the App\n         this.props.changeTab(tab);\n      }\n   }\n\n   render() {\n\n      //Create tabs dynamically\n      const createTab = name => {\n\n         let capitalized = name[0].toUpperCase() + name.slice(1);\n\n         return(\n         <li className=\"nav-item\">\n                  <button onClick= {() => this.switch(name) } className={\"nav-link \" + (this.state.tab === name ? 'active' : undefined)}>{capitalized}</button>\n         </li>);\n      }\n\n      return (\n         <div className=\"navbar flex-nowrap mb-5 mt-2 d-flex justify-content-center\">\n\n            {/* New Item Button - Opens the dialog*/}\n            <button type=\"button\" data-toggle=\"modal\" data-target=\"#newItemDialog\" className=\"btn btn-outline-primary mr-5 px-3\">New Item</button>\n            <NewItemDialog \n               newItem= {(e, data) => {\n                  this.props.newItem(e, data); // Create the item\n                  this.switch('pending'); // Switch tab to 'Pending'\n            }}/>\n\n            {/* Navigation */}\n            <ul className=\"nav nav-tabs flex-nowrap d-flex\">\n               {createTab('pending')}\n               {createTab('active')}\n               {createTab('completed')}\n               {createTab('rejected')}\n            </ul>\n\n            {/* Search */}\n            <div className=\"form-inline\">\n               <input className=\"form-control ml-5\" spellCheck=\"false\" onInput={this.props.search} type=\"search\" placeholder=\"Search\"/>\n            </div>\n         </div>\n      )\n   }\n}\n\nexport default Nav;","//#region Import\n\n//React\nimport React from 'react';\n\n//Bootstrap\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport $ from '../node_modules/jquery/dist/jquery';\nimport '../node_modules/popper.js/dist/popper';\nimport '../node_modules/bootstrap/dist/js/bootstrap';\n\n//Firebase\nimport * as firebase from '../node_modules/firebase/app';\nimport \"firebase/database\"\nimport config from './components/firebase';\n\n//Stylesheet\nimport './App.css';\n\n//Components\nimport Items from './components/Items';\nimport Nav from './components/Nav';\n\n//#endregion\n\n//Initialize database\nfirebase.initializeApp(config);\nlet database = firebase.database().ref('items');\n\n//#endregion\n\nclass App extends React.Component {\n\n    //#region Initialization\n    \n    // Get initial items from Firebase and listen for db changes\n    constructor(props) {\n        super(props);\n        \n        // Make an array of items\n        database.on('value', snapshot => {\n            \n            let itemsObj = snapshot.val();\n            \n            if (itemsObj === null) {\n                this.setState({\n                    items: []\n                });\n                return;\n            }\n            \n            let items = [];\n            let keys = Object.keys(itemsObj);\n            \n            //Make the array, add the key as a property to every item\n            for (let key of keys) {\n                let item = itemsObj[key];\n                item.key = key;\n                items.push(item);\n            }\n            \n            this.setState({\n                items\n            });\n        });\n    }\n    \n    // Initial state\n    state = {\n        tab: 'pending',\n        searching: false,\n        results: [],\n        items: []\n    };\n\n    //#endregion\n    \n    //#region Item Actions\n\n    // Search for an item according to a keyword\n    searchItem = e => {\n        \n        let keyword = e.target.value.toString().toLowerCase(); // Set to lowercase to disable case-sensitivity\n        \n        // No input entered, clear results and return\n        if (keyword === \"\") {\n            this.setState({\n                searching: false,\n                results: []\n            });\n            return;\n        }\n        \n        // Save all search results to an array\n        const results = [];\n\n        itemsloop: // Loop through all items\n        for (let item of this.state.items) {\n\n            // Loop through all fields of the item\n            for (let field of Object.values(item)) {\n\n                // If the field has the keyword inside of it, return the item in the results\n                if (field.toLowerCase().includes(keyword)){\n                    results.push(item);\n                    continue itemsloop;\n                }\n            }\n        }\n        \n        // Update the original items array\n        this.setState({\n            searching: true,\n            results\n        });\n    }\n\n    //Get today's current date\n    getDate = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        return `${dd}/${mm}/${yyyy}`\n    }\n    \n    // Creates a new item in the database\n    newItem = (e, state) => {\n        \n        e.preventDefault(); // Prevent form from refreshing the page\n        e.target.reset(); // Reset form\n        $('#newItemDialog').modal('hide'); // Hide modal\n        \n        // Initialize an item object, to contain all fields acquired from inputs\n        let item = {\n            tab: 'pending',\n            date: this.getDate(),\n            type: 'Supplier'\n        };\n        \n        //Return non-empty fields only\n        let keys = Object.keys(state);\n        for(let key of keys){\n            let value = state[key];\n            if (value !== undefined){\n                item[key] = value;\n            }\n        }\n        \n        //Add the new item to the database\n        database.push().set(item);\n    }\n    \n    //Delete the selected item from the database\n    removeItem = key => {\n        database.child(key).remove();\n    }\n\n    //Update an item\n    editItem = (e, item) => {\n\n        e.preventDefault(); // Prevent form from refreshing the page\n        e.target.reset(); // Reset form\n        $('#editItemDialog').modal('hide'); // Hide modal\n\n        // Apply changes to database\n        database.child(item.key).update(item);\n    }\n\n    // Move an item between tabs\n    changeItemTab = item => {\n        $('#changeTabDialog').modal('hide'); // Hide modal\n\n        // Add 'Closed date' field if set as completed/rejected\n        let tab = item.tab;\n        if (tab === 'completed' || tab === 'rejected'){\n            item.closedate = this.getDate();\n        }\n\n        database.child(item.key).update(item);\n    }\n\n    //#endregion\n    \n    render() {\n        return (\n            <div className=\"container\">\n  \n                {/* Nav Bar */}\n                <Nav \n                newItem={this.newItem} \n                search={this.searchItem} \n                changeTab={tab => this.setState({tab})}>\n                </Nav>\n        \n                {/* Items */}\n                <Items \n                editItem={this.editItem} \n                removeItem={this.removeItem} \n                tab={this.state.tab} \n                items={this.state.searching ? this.state.results : this.state.items}\n                changeItemTab={this.changeItemTab}>\n                </Items>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}