{"version":3,"sources":["components/firebase.js","components/Item.js","components/EditItemDialog.js","components/ChangeTabDialog.js","components/Items.js","components/NewItemDialog.js","components/Nav.js","App.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Item","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","createCardHeader","color","props","item","type","react_default","a","createElement","className","title","class","date","createCardBody","tab","key","substring","fields","supplier","description","client","priority","push","closedate","reason","createLinks","href","tfs","rel","target","ticket","inherits","createClass","value","_this2","onClick","getItem","data-toggle","data-target","Component","EditItemDialog","createInputs","createInput","name","display","placeholder","required","htmlFor","defaultValue","onInput","e","updateTemp","id","temp","onChange","submitForm","editItem","createSetAsBtn","setItemAs","newTab","textContent","toLowerCase","openTabDialog","createButtons","role","aria-haspopup","aria-expanded","aria-labelledby","modal","document","querySelector","form","$","on","reset","tabIndex","aria-hidden","onSubmit","autoComplete","data-dismiss","removeItem","changeTabDialog","state","setState","capitalTabName","tabName","toUpperCase","slice","confirm","preventDefault","changeItemTab","status","undefined","Items","data","_i","_Object$keys","keys","items","map","components_Item","activeItem","assign","_this3","listItems","components_EditItemDialog","ChangeTabDialog","NewItemDialog","defineProperty","clearState","newItem","typeDropdown","Nav","switch","changeTab","createTab","capitalized","components_NewItemDialog","search","firebase","database","ref","App","searching","results","searchItem","keyword","toString","_iteratorNormalCompletion","_didIteratorError","_iteratorError","itemsloop","_step","_iterator","Symbol","iterator","next","done","_Object$values","values","includes","err","return","getDate","today","Date","dd","String","padStart","mm","getMonth","yyyy","getFullYear","_i2","_keys","set","child","remove","update","snapshot","itemsObj","val","_i3","_keys2","components_Nav","components_Items","React","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.3d054512.chunk.js","sourcesContent":["const config = {\n    apiKey: \"AIzaSyC8DcDLA9ksP2GsAUEfnu0gZm48R5mps9s\",\n    authDomain: \"bugsmanager-8f66d.firebaseapp.com\",\n    databaseURL: \"https://bugsmanager-8f66d.firebaseio.com\",\n    projectId: \"bugsmanager-8f66d\",\n    storageBucket: \"\",\n    messagingSenderId: \"345845082304\",\n    appId: \"1:345845082304:web:3280019aa7596de0\"\n  };\n\n  export default config;","import React, { Component } from 'react';\n\nexport class Item extends Component {\n\n    // Create the card's header, dynmically\n    createCardHeader = () => {\n\n        // Get the item's type, and dynamically set the its color\n        let type = this.props.item.type;\n        let color;\n\n        // Dynmically fetch the appropriate type color\n        switch(type){\n\n            // Supplier - Gray\n            case 'Supplier':\n                    color = 'secondary';\n                break;\n\n            // Affiliate - Blue\n            case 'Affiliate':\n                color = 'primary';\n                break;\n\n            // Room Mapping - Black\n            case 'Room Mapping':\n                color = 'dark';\n                break;\n            \n            // no default\n        }\n\n        return (\n            <div className=\"d-flex card-title\">\n                <h3 className=\"mr-auto\">{this.props.item.title}</h3>\n                <div className=\"d-flex flex-column ml-auto text-center\">\n                    <h5><span class={`badge badge-${color}`}>{this.props.item.type}</span></h5>\n                    <h5>{this.props.item.date}</h5>\n                </div>\n            </div>\n        );\n    }\n\n    // Dynamically display the Item's properties\n    createCardBody = () => {\n\n        let item = this.props.item; // The Item to display\n        let tab = item.tab; // Get the Item's tab location\n        let key = item.key.substring(0,4);\n\n        let fields = [\n            <h5><span key={'supplier' + key} class=\"badge badge-warning card-text\">{item.supplier}</span></h5>,\n            <p key={'desc' + key} className=\"card-text mt-3\">{item.description}</p>,\n            <p key={'client' + key} className=\"card-text\"><strong>Affected Clients: </strong>{item.client}</p>\n        ];\n        \n\n        // Check which tab the item belongs to (different tabs display different fields)\n        switch(tab){\n\n            // Active \n            case 'active':\n\n                    // Determine badge color based on priority\n                    let color;\n                    switch (item.priority) {\n\n                        // Unknown - teal\n                        case 'Unknown':\n                            color = 'info';\n                            break;\n\n                        // Low - green\n                        case 'Low':\n                            color = 'success';\n                            break;\n                        \n                        // Medium - Yellow\n                        case 'Medium':\n                            color = 'warning';\n                            break;\n\n                        // High - Red\n                        case 'High':\n                            color = 'danger';\n                            break;\n                        // no default\n                    }\n\n                    fields.push(\n                        <h4><span key={'priority' + key} class={`badge badge-${color} card-text`}>{item.priority}</span></h4>\n                    );\n                break;\n            \n            // Completed\n            case 'completed':\n                    fields.push(\n                        <p key={'closedate' + key} className=\"card-text\">Completed at {item.closedate}</p>\n                    );\n                break;\n            \n            // Rejected\n            case 'rejected':\n                    fields.push(\n                        <p key={'closedate' + key} className=\"card-text\">Rejected at {item.closedate} due to {item.reason}</p>\n                    );\n                break;\n            \n            // no default\n        }\n        \n        return fields;\n    }\n\n    // Create the TFS & Ticket links\n    createLinks = () => {\n        return (\n            <div className=\"justify-content-center d-flex\">\n                <a href={`https://gimmonix.visualstudio.com/Versions%20list%20-%20Waterfall/_workitems/edit/${this.props.item.tfs}`} className=\"card-link badge badge-primary p-2\" rel=\"noopener noreferrer\" target=\"_blank\">TFS Link</a>\n                <a href={`https://carsolize.zendesk.com/agent/tickets/${this.props.item.ticket}`} className=\"card-link badge badge-primary p-2\" rel=\"noopener noreferrer\" target=\"_blank\">Ticket Link</a>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"card col-5 mb-4 mx-2\" onClick={() => this.props.getItem(this.props.item)} data-toggle=\"modal\" data-target=\"#editItemDialog\">\n                <div className=\"card-body\">\n                    {this.createCardHeader()}\n                    {this.createCardBody()}\n                    {this.createLinks()}\n                </div>\n            </div>\n         )\n    }\n}\n\nexport default Item;","import React, { Component } from 'react';\nimport $ from '../../node_modules/jquery/dist/jquery';\n\nexport class EditItemDialog extends Component {    \n\n    // Once the component has loaded, configure modal to reset form on dismiss (this is called only once in the entire lifycycle)\n    componentDidMount() {\n        \n        let modal = document.querySelector('#editItemDialog');\n        let form = document.querySelector('#editItemForm');\n        $(modal).on('hide.bs.modal', () => {\n            form.reset();\n        });\n    }\n\n    // Dynamically create inputs\n    createInputs = () => {\n\n        // Check if there is no item to return\n        if (!this.props.item){\n            return null;\n        }\n\n        const createInput = (type, name, display, placeholder, value, required) => {\n            return(\n                <div className=\"form-group\">\n                    <label htmlFor={name} className=\"col-form-label\">{display}</label>\n                    <input type={type} defaultValue={value} onInput={e => this.props.updateTemp(name, e.target.value)} className=\"form-control\" id={name}  placeholder={placeholder} required={required}/>\n                </div>\n            );\n        }\n\n        const typeDropdown = () => {\n\n            return(\n                <div>\n                    <label htmlFor=\"selectType\" className=\"col-form-label\">Type</label>\n                    <select value={this.props.temp.type} onChange={e => this.props.updateTemp('type', e.target.value)} className=\"form-control mb-2\" id=\"selectType\">\n                        <option>Supplier</option>\n                        <option>Affiliate</option>\n                        <option>Room Mapping</option>\n                    </select>\n                </div>);\n        }\n\n        return(\n            <div>\n                {typeDropdown()}\n                {createInput('text', 'title', 'Title', 'A descriptive title for the bug', this.props.item.title, /*true*/null)}\n                {createInput('text', 'description', 'Description', 'A short description of the bug', this.props.item.description, null)}\n                {createInput('text', 'supplier', 'Supplier', 'The supplier causing the bug or affected by it', this.props.item.supplier, /*true*/null)}\n                {createInput('text', 'client', 'Impcated Client', 'Who is suffering from this bug?', this.props.item.client, null)}\n                {createInput('number', 'tfs', 'TFS #', 'The TFS number, e.g. 23580', this.props.item.tfs, /*true*/null)}\n                {createInput('number', 'ticket', 'Ticket #', 'The Ticket\\'s number, if exists, e.g. 23580', this.props.item.ticket, null)}\n            </div>\n        );\n\n    }\n\n    // Submits the form and sends its data to App.js\n    submitForm = e => {\n        this.props.editItem(e);\n    }\n\n    // Creates the dropdown button that changes an Item's tab\n    createSetAsBtn = () => {\n\n        // Check if there is no item to return\n        if (!this.props.item){\n            return null;\n        }\n\n        // 'Set as' Button onClick\n        const setItemAs = e => {\n            let newTab = e.target.textContent.toLowerCase();\n            this.props.updateTemp('tab', newTab);\n            this.props.openTabDialog(newTab);\n        }\n\n        // Dynamically create the dropdown buttons\n        const createButtons = tab => {\n            let currentTab = this.props.item.tab;\n\n            // Don't display 'Set as Pending' if the item is already set to Pending\n            if (currentTab === tab.toLowerCase()){\n                return null;\n            }\n            \n            return <button onClick={setItemAs} type=\"button\" className=\"dropdown-item btn\">{tab}</button>\n        }\n\n        // Render\n        return(\n        <div className=\"btn-group\" role=\"group\">\n            <button id=\"btnGroupDrop1\" type=\"button\" className=\"btn btn-warning dropdown-toggle mr-1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Set as</button>\n            <div className=\"dropdown-menu\" aria-labelledby=\"btnGroupDrop1\">\n                {createButtons('Pending')}\n                {createButtons('Active')}\n                {createButtons('Completed')}\n                {createButtons('Rejected')}\n            </div>\n        </div>);\n    }\n\n    // Render\n    render() {            \n\n        return (\n            <div className=\"modal fade\" id=\"editItemDialog\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"editItemDialogLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content px-2\">\n                        <form id=\"editItemForm\" onSubmit={this.submitForm} autoComplete=\"off\">\n\n                            {/* Header */}\n                            <div className=\"modal-header\">\n                                <h5 className=\"modal-title\" id=\"editItemDialogLabel\">Edit Item</h5>\n\n                                {/* Buttons */}\n                                <div>\n                                    {this.createSetAsBtn()}\n                                    <button type=\"submit\" className=\"btn btn-success mx-1\">Save</button>\n                                    <button type=\"button\" className=\"btn btn-secondary mx-1\" data-dismiss=\"modal\">Cancel</button>\n                                    <button type=\"button\" className=\"btn btn-danger mx-1\" onClick={() => this.props.removeItem(this.props.item.key)} data-dismiss=\"modal\">Delete</button>\n                                </div>\n                            </div>\n\n                            {/* Body */}\n                            <div className=\"modal-body\">\n                                {this.createInputs()}\n                            </div>                                \n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default EditItemDialog;","import React, { Component } from 'react';\nimport $ from '../../node_modules/jquery/dist/jquery';\n\nexport class changeTabDialog extends Component {\n\n    //#region Initialization\n\n    state = {\n        priority: 'Unknown'\n    };\n\n    // Once the component has loaded, configure modal to reset form on dismiss (this is called only once in the entire lifycycle)\n    componentDidMount() {\n        \n        let modal = document.querySelector('#changeTabDialog');\n        let form = document.querySelector('#changeTabForm');\n        $(modal).on('hide.bs.modal', () => {\n            form.reset();\n        });\n    }\n\n    //#endregion\n\n    // Dynamically create inputs, depending on the target tab\n    createInputs = () => {\n\n        // If no tab is given, don't create anything\n        if (!this.props.tab){\n            return null;\n        }\n\n        let tab = this.props.tab; // The target tab\n\n        // Moving the Item to 'Active' tab, ask user to set priority\n        if (tab === 'active') { \n            return(\n                <div>\n                    <label htmlFor=\"select_priority\" className=\"col-form-label\">Priority</label>\n                    <select defaultValue=\"Unknown\" onChange={e => this.setState({priority: e.target.value})} className=\"form-control\" id=\"select_priority\" required>\n                        <option>Unknown</option>\n                        <option>Low</option>\n                        <option>Medium</option>\n                        <option>High</option>\n                    </select>\n                </div>\n            );\n        }\n\n        // Moving the Item to 'Rejected' tab, ask user to rejection reason\n        else if (tab === 'rejected') {\n            return(\n                <div className=\"form-group\">\n                    <label htmlFor=\"input_reason\" className=\"col-form-label\">Reason</label>\n                    <input type=\"text\" onInput={e => this.setState({reason: e.target.value})} className=\"form-control\" id=\"input_reason\"  placeholder=\"Why the bug has been rejected?\" required/>\n                </div>\n            );\n        }\n    }\n\n    // Display the tab's name with an uppercase first letter\n    capitalTabName = () => {\n\n        // If no tab is given, don't display anything\n        if (!this.props.tab){\n            return null;\n        }\n        let tabName = this.props.tab;\n        return tabName[0].toUpperCase() + tabName.slice(1);\n    }\n\n    // Move the data along, Form --> Items.js --> App.js --> Database\n    confirm = e => {\n\n        const clearState = () => {\n            this.setState({\n                status: undefined,\n                priority: 'Unknown',\n                reason: undefined,\n            });\n        }\n\n        e.preventDefault();\n        e.target.reset(); // Reset the form\n        this.props.changeItemTab(this.state); // Send the Item to App.js\n        clearState(); // Clear the state\n    }\n\n    render() {\n\n        return (\n            <div className=\"modal fade\" id=\"changeTabDialog\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"changeTabDialogLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content px-2\">\n                        <form id=\"changeTabForm\" onSubmit={this.confirm} autoComplete=\"off\">\n\n                            {/* Header */}\n                            <div className=\"modal-header\">\n                                <h5 className=\"modal-title\" id=\"changeTabDialogLabel\">Set as {this.capitalTabName()}</h5>\n\n                                {/* Buttons */}\n                                <div>\n                                    <button type=\"submit\" className=\"btn btn-success mx-1\">Confirm</button>\n                                    <button type=\"button\" className=\"btn btn-secondary mx-1\" data-dismiss=\"modal\">Cancel</button>\n                                </div>\n                            </div>\n\n                            {/* Body */}\n                            <div className=\"modal-body\">\n                                {this.createInputs()}\n                            </div>                                \n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default changeTabDialog;","import React, { Component } from 'react';\nimport Item from './Item';\nimport EditItemDialog from './EditItemDialog';\nimport ChangeTabDialog from './ChangeTabDialog';\nimport $ from '../../node_modules/jquery/dist/jquery';\n\nexport class Items extends Component {\n\n    state = {};\n\n    listItems(){\n\n        return this.props.items.map(item => \n            {\n                return(\n                item.tab === this.props.tab // Is the item in the curretly viewed tab?\n                ? \n                <Item getItem={item => this.setState({activeItem: Object.assign({}, item), temp: Object.assign({}, item)})} key={item.key} item={item}/> // Yes -> Display the item\n                : \n                null) // No -> Don't display the item\n            });\n    }\n\n    updateTemp = (key, value) => {\n        let temp = this.state.temp;\n        temp[key] = value;\n        this.setState(temp);\n    }\n\n    // Close the edit modal and open the changeTab dialog\n    openTabDialog = tab => {\n\n        $('#editItemDialog').modal('hide'); // Close dialog\n\n        // If the target tab is pending/completed, skip tab dialog\n        if (tab === 'pending' || tab === 'completed') {\n            return this.changeItemTab();\n        }\n\n        this.setState({newTab: tab}); // Save the new item's tab\n        $('#changeTabDialog').modal('show'); // Open ChangeTabDialog\n    }\n\n    // Save the changed item to database\n    changeItemTab = data => {\n\n        let item = this.state.temp; // The configured item\n\n        // Data can be empty, e.g. moving to pending doesn't require to send any data\n        if(data !== null && data !== undefined){\n            for (let key of Object.keys(data)){\n                if (data[key] !== undefined){\n                    item[key] = data[key];\n                }\n            }\n        }\n\n        this.props.changeItemTab(item); // Send to App.js and then to Database\n    }\n\n\n    render() {\n\n        return (\n            <div className=\"row d-flex justify-content-center\">\n                {/* List all Items */}\n                {this.listItems()}\n\n                {/* This dialog opens when editing/deleting an Item */}\n                <EditItemDialog \n                updateTemp={this.updateTemp} \n                temp={this.state.temp} \n                item={this.state.activeItem} \n                editItem={e => this.props.editItem(e, this.state.temp)} \n                removeItem={this.props.removeItem} \n                openTabDialog={this.openTabDialog}/>\n\n                {/* Change an Item's Tab, let the user fill the required fields */}\n                <ChangeTabDialog \n                tab={this.state.newTab}\n                changeItemTab={this.changeItemTab}/>\n            </div>\n        )\n    }\n}\n\nexport default Items;","import React, {\n    Component\n} from 'react';\n\nexport class NewItemDialog extends Component {\n    \n    // Store form data here\n    state = {\n        type: 'Supplier'\n    };\n    \n    createInput = (type, name, display, placeholder, required) => {\n        \n        return (\n            <div className=\"form-group\">\n              <label htmlFor={name} className=\"col-form-label\">{display}</label>\n              <input type={type} className=\"form-control\" id={name} onInput={e => this.setState({ [name]: e.target.value })} placeholder={placeholder} required={required}/>\n          </div>\n        );\n    }\n    \n    typeDropdown() {\n        return (\n            <div>\n                <label htmlFor=\"selectType\" className=\"col-form-label\">Type</label>\n                <select className=\"form-control mb-3\" onInput={e => this.setState({ type: e.target.value })} id=\"selectType\" required>\n                    <option>Supplier</option>\n                    <option>Affiliate</option>\n                    <option>Room Mapping</option>\n                </select>\n            </div>);\n    }\n    \n    clearState = () => {\n        this.setState({\n            title: undefined,\n            type: 'Supplier',\n            description: undefined,\n            supplier: undefined,\n            client: undefined,\n            tfs: undefined,\n            ticket: undefined,\n        });\n    }\n\n    submitForm = e => {\n        this.props.newItem(e, this.state); // Create the item\n        this.clearState(); // Clear the state after form submit\n    }\n    \n    render() {\n        \n        return (\n            <div className=\"modal fade\" id=\"newItemDialog\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"newItemDialogLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog\" role=\"document\">\n                    <div className=\"modal-content px-2\">\n\n\n                    <form id=\"newItemForm\" onSubmit={this.submitForm} autoComplete=\"off\">\n\n                        {/* Header */}\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"editItemDialogLabel\">New Item</h5>\n\n                            {/* Buttons */}\n                            <div>\n                                <button type=\"submit\" className=\"btn btn-primary mx-1\">Add Item</button>\n                                <button type=\"button\" className=\"btn btn-secondary mx-1\" data-dismiss=\"modal\">Cancel</button>\n                            </div>\n                        </div>\n\n\n                        {/* Body */}\n                        <div className=\"modal-body\">\n                            {this.typeDropdown()}\n                            {this.createInput('text', 'title', 'Title', 'A descriptive title for the bug', /*true*/null)}\n                            {this.createInput('text', 'description', 'Description', 'A short description of the bug', null)}\n                            {this.createInput('text', 'supplier', 'Supplier', 'The supplier causing the bug or affected by it', /*true*/null)}\n                            {this.createInput('text', 'client', 'Impcated Client', 'Who is suffering from this bug?', null)}\n                            {this.createInput('number', 'tfs', 'TFS #', 'The TFS number, e.g. 23580', /*true*/null)}\n                            {this.createInput('number', 'ticket', 'Ticket #', 'The Ticket\\'s number, if exists, e.g. 23580', null)}                                                                        \n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default NewItemDialog;\n","import React, { Component } from 'react'\nimport NewItemDialog from './NewItemDialog';\n\nexport class Nav extends Component {\n\n   state = {\n      tab: 'pending'\n   };\n\n   //Move between tabs, e.g. Pending to Rejected\n   switch = tab => {\n\n      if (tab !== this.state.tab){\n\n         //Update state with the new tab\n         this.setState({tab});\n\n         //Change tab in the App\n         this.props.changeTab(tab);\n      }\n   }\n\n   render() {\n\n      //Create tabs dynamically\n      const createTab = name => {\n\n         let capitalized = name[0].toUpperCase() + name.slice(1);\n\n         return(\n         <li className=\"nav-item\">\n                  <button onClick= {() => this.switch(name) } className={\"nav-link \" + (this.state.tab === name ? 'active' : undefined)}>{capitalized}</button>\n         </li>);\n      }\n\n      return (\n         <div className=\"navbar flex-nowrap mb-5 mt-2 d-flex justify-content-center\">\n\n            {/* New Item Button - Opens the dialog*/}\n            <button type=\"button\" data-toggle=\"modal\" data-target=\"#newItemDialog\" className=\"btn btn-outline-primary mr-5 px-3\">New Item</button>\n            <NewItemDialog \n               newItem= {(e, data) => {\n                  this.props.newItem(e, data); // Create the item\n                  this.switch('pending'); // Switch tab to 'Pending'\n            }}/>\n\n            {/* Navigation */}\n            <ul className=\"nav nav-tabs flex-nowrap d-flex\">\n               {createTab('pending')}\n               {createTab('active')}\n               {createTab('completed')}\n               {createTab('rejected')}\n            </ul>\n\n            {/* Search */}\n            <div className=\"form-inline\">\n               <input className=\"form-control ml-5\" onInput={this.props.search} type=\"search\" placeholder=\"Search\"/>\n            </div>\n         </div>\n      )\n   }\n}\n\nexport default Nav;","//#region Import\n\n//React\nimport React from 'react';\n\n//Bootstrap\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport $ from '../node_modules/jquery/dist/jquery';\nimport '../node_modules/popper.js/dist/popper';\nimport '../node_modules/bootstrap/dist/js/bootstrap';\n\n//Firebase\nimport * as firebase from '../node_modules/firebase/app';\nimport \"firebase/database\"\nimport config from './components/firebase';\n\n//Stylesheet\nimport './App.css';\n\n//Components\nimport Items from './components/Items';\nimport Nav from './components/Nav';\n\n//#endregion\n\n//Initialize database\nfirebase.initializeApp(config);\nlet database = firebase.database().ref('items');\n\n//#endregion\n\nclass App extends React.Component {\n\n    //#region Initialization\n    \n    // Get initial items from Firebase and listen for db changes\n    constructor(props) {\n        super(props);\n        \n        // Make an array of items\n        database.on('value', snapshot => {\n            \n            let itemsObj = snapshot.val();\n            \n            if (itemsObj === null) {\n                this.setState({\n                    items: []\n                });\n                return;\n            }\n            \n            let items = [];\n            let keys = Object.keys(itemsObj);\n            \n            //Make the array, add the key as a property to every item\n            for (let key of keys) {\n                let item = itemsObj[key];\n                item.key = key;\n                items.push(item);\n            }\n            \n            this.setState({\n                items\n            });\n        });\n    }\n    \n    // Initial state\n    state = {\n        tab: 'pending',\n        searching: false,\n        results: [],\n        items: []\n    };\n\n    //#endregion\n    \n    //#region Item Actions\n\n    // Search for an item according to a keyword\n    searchItem = e => {\n        \n        let keyword = e.target.value.toString().toLowerCase(); // Set to lowercase to disable case-sensitivity\n        \n        // No input entered, clear results and return\n        if (keyword === \"\") {\n            this.setState({\n                searching: false,\n                results: []\n            });\n            return;\n        }\n        \n        // Save all search results to an array\n        const results = [];\n\n        itemsloop: // Loop through all items\n        for (let item of this.state.items) {\n\n            // Loop through all fields of the item\n            for (let field of Object.values(item)) {\n\n                // If the field has the keyword inside of it, return the item in the results\n                if (field.toLowerCase().includes(keyword)){\n                    results.push(item);\n                    continue itemsloop;\n                }\n            }\n        }\n        \n        // Update the original items array\n        this.setState({\n            searching: true,\n            results\n        });\n    }\n\n    //Get today's current date\n    getDate = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        return `${dd}/${mm}/${yyyy}`\n    }\n    \n    // Creates a new item in the database\n    newItem = (e, state) => {\n        \n        e.preventDefault(); // Prevent form from refreshing the page\n        e.target.reset(); // Reset form\n        $('#newItemDialog').modal('hide'); // Hide modal\n        \n        // Initialize an item object, to contain all fields acquired from inputs\n        let item = {\n            tab: 'pending',\n            date: this.getDate(),\n            type: 'Supplier'\n        };\n        \n        //Return non-empty fields only\n        let keys = Object.keys(state);\n        for(let key of keys){\n            let value = state[key];\n            if (value !== undefined){\n                item[key] = value;\n            }\n        }\n        \n        //Add the new item to the database\n        database.push().set(item);\n    }\n    \n    //Delete the selected item from the database\n    removeItem = key => {\n        database.child(key).remove();\n    }\n\n    //Update an item\n    editItem = (e, item) => {\n\n        e.preventDefault(); // Prevent form from refreshing the page\n        e.target.reset(); // Reset form\n        $('#editItemDialog').modal('hide'); // Hide modal\n\n        // Apply changes to database\n        database.child(item.key).update(item);\n    }\n\n    // Move an item between tabs\n    changeItemTab = item => {\n        $('#changeTabDialog').modal('hide'); // Hide modal\n\n        // Add 'Closed date' field if set as completed/rejected\n        let tab = item.tab;\n        if (tab === 'completed' || tab === 'rejected'){\n            item.closedate = this.getDate();\n        }\n\n        database.child(item.key).update(item);\n    }\n\n    //#endregion\n    \n    render() {\n        return (\n            <div className=\"container\">\n  \n                {/* Nav Bar */}\n                <Nav \n                newItem={this.newItem} \n                search={this.searchItem} \n                changeTab={tab => this.setState({tab})}>\n                </Nav>\n        \n                {/* Items */}\n                <Items \n                editItem={this.editItem} \n                removeItem={this.removeItem} \n                tab={this.state.tab} \n                items={this.state.searching ? this.state.results : this.state.items}\n                changeItemTab={this.changeItemTab}>\n                </Items>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}